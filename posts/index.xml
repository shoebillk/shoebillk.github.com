<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on BH Kim's blog</title><link>https://byounghoonkim.github.io/posts/</link><description>Recent content in Posts on BH Kim's blog</description><generator>Hugo -- gohugo.io</generator><language>ko-kr</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 23 May 2020 22:06:31 +0900</lastBuildDate><atom:link href="https://byounghoonkim.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim 입력모드 노말모드 전환시 한글 영어 자동 전환하기</title><link>https://byounghoonkim.github.io/posts/vim-kor-eng-auto-switch/</link><pubDate>Sat, 23 May 2020 22:06:31 +0900</pubDate><guid>https://byounghoonkim.github.io/posts/vim-kor-eng-auto-switch/</guid><description>Vim을 사용하다 보면 한글 입력 중에 Esc로 노말 모드 진입할 때 다시 영문으로 바꿔줘야 하는 불편함이 있다. 이 문제를 해결해 보려고 여러 사람들이 여러 방법을 시도</description><content type="html"><![CDATA[<p>Vim을 사용하다 보면 한글 입력 중에 Esc로 노말 모드 진입할 때 다시 영문으로 바꿔줘야 하는 불편함이 있다.</p>
<p>이 문제를 해결해 보려고 여러 사람들이 여러 방법을 시도 했고 그 흔적들은 아래 블로그 글들에서 볼 수 있다.</p>
<ul>
<li><a href="http://seorenn.blogspot.com/2011/04/vim-vim-esc.html">Vim Vim에서 ESC를 눌렀을 때 영문 상태로 전환하기 - Seorenn SIGSEGV</a></li>
<li><a href="https://johngrib.github.io/blog/2017/05/04/input-source/">Vim 사용시 한/영 전환 문제 해결하기 - 기계인간 John Grib</a></li>
<li><a href="https://coldmater.tistory.com/177">VIMOS X한글 입력 상태에서 노멀모드 복귀 후 영어 입력소스로 전환하기 (feat. hammerspoon, autohotkey)</a></li>
</ul>
<p>위 블로그들에서 소개된 방법과 별개로 im-select 라는 툴을 이용하는 방법을 소개한다.
이 방법을 소개하는 이유는 내게 가장 잘 맞았고 기대한 대로 잘 동작하며 Visual Studio Code 의 Vim Mode에서도 비슷한 방법을 적용할 수 있기 때문이다!</p>
<p>아래 설명은 macOS 환경 기준이다.</p>
<p>(다른 환경은 시도해 보지 않았다.)</p>
<h2 id="im-select-설치하기">im-select 설치하기</h2>
<p>아래 명령으로  im-select라는 툴을 설치한다.</p>
<p>(참고 - <a href="https://github.com/daipeihust/im-select">https://github.com/daipeihust/im-select</a>)</p>
<pre><code>curl -Ls https://raw.githubusercontent.com/daipeihust/im-select/master/install_mac.sh | sh
The im-select program will be downloaded to your /usr/local/bin/ path.
</code></pre><p>위 명령을 실행하면 /usr/local/bin 경로 아래 im-select 라는 실행 파일이 설치된다.</p>
<h2 id="brglngvim-im-select-플러그인-설치">brglng/vim-im-select 플러그인 설치</h2>
<p>&lsquo;brglng/vim-im-select&rsquo;라는 Vim 플러그인을 설치한다.</p>
<p>(참고 - <a href="https://github.com/brglng/vim-im-select">https://github.com/brglng/vim-im-select</a>)</p>
<p>(vim-plug를 통해 플러그인을 설치했다. 플러그인을 설치하는 방법은 <a href="https://github.com/junegunn/vim-plug">vim-plug</a> 페이지를 참고한다.)</p>
<pre><code>call plug#begin('~/.vim/plugged')
    Plug 'brglng/vim-im-select'
call plug#end()
</code></pre><p>설치를 완료하면 아래와 같이 한글 입력이 가능한 입력 모드에서
Esc 키를 한번 누르면 영문으로 입력 언어가 변경되면서 노말 모드로 진입하게 되어
추가적인 IME 전환이 필요 없어진다.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://player.vimeo.com/video/421942102" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" title="vimeo video" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
 </div>

<p>이 방법의 모드 전환 시 마다 im-select 프로세스를 실행하기 때문에 저사양 환경에서 입력 전환이 조금 지연되는 단점이 있다.</p>
<p>하지만 설정이 비교적 쉽고 사양만 따라 준다면 기대한 대로 잘 동작한다.</p>
]]></content></item><item><title>Docker로 Golang 프로젝트 빌드 하기</title><link>https://byounghoonkim.github.io/posts/building_golang_using_docker/</link><pubDate>Fri, 25 Oct 2019 22:19:22 +0900</pubDate><guid>https://byounghoonkim.github.io/posts/building_golang_using_docker/</guid><description>새로운 Golang 버전이 나오면 내 프로젝트가 잘 빌드 되는지 확인해 보고 싶을 때가 있다. 또 다른 버전에서 프로젝트가 잘 빌드 되는지 확인해 보고 싶을 때도 있다. 여러 Golang 버전을</description><content type="html"><![CDATA[<p>새로운 Golang 버전이 나오면 내 프로젝트가 잘 빌드 되는지 확인해 보고 싶을 때가 있다.
또 다른 버전에서 프로젝트가 잘 빌드 되는지 확인해 보고 싶을 때도 있다.</p>
<p>여러 Golang 버전을 관리하는 방법은 <a href="https://github.com/moovweb/gvm">gvm</a> 도 있지만 여러가지 설정도 해야 하고 필요한 버전들을 설치해야 해서 조금 불편할 수도 있다.</p>
<p>Docker를 이용하면 간단히 프로젝트를 빌드해 볼 수 있다. 그 방법을 간단히 알아 보자.</p>
<h2 id="샘플-프로젝트">샘플 프로젝트</h2>
<p>빌드할 프로젝트 hello라는 프로젝트를 만들고 main.go 파일을 작성한다.</p>
<pre><code>hello
├── compile.sh
└── main.go
</code></pre><div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">main</span>
<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>
<span class="kd">func</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">fmt</span><span class="p">.</span><span class="nf">Println</span><span class="p">(</span><span class="s">&#34;Hello&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div><h2 id="빌드-하기">빌드 하기</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nv">GOLANG_VERSION</span><span class="o">=</span><span class="s2">&#34;1.13.1&#34;</span>

<span class="nv">GOX_INST_CMD</span><span class="o">=</span><span class="s2">&#34;go get github.com/mitchellh/gox&#34;</span>
<span class="nv">GOX_BUILD_CMD</span><span class="o">=</span><span class="s2">&#34;gox -output=build/{{.OS}}/{{.Arch}}/{{.Dir}}&#34;</span>

<span class="nv">PROJECT_DIR</span><span class="o">=</span><span class="sb">`</span>basename <span class="s2">&#34;</span><span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span><span class="s2">&#34;</span><span class="sb">`</span>

docker run -it --rm <span class="se">\
</span><span class="se"></span>	-v <span class="k">$(</span><span class="nb">pwd</span><span class="k">)</span>:/<span class="nv">$PROJECT_DIR</span> <span class="se">\
</span><span class="se"></span>	golang:<span class="nv">$GOLANG_VERSION</span> <span class="se">\
</span><span class="se"></span>	bash -c <span class="s2">&#34;cd /</span><span class="nv">$PROJECT_DIR</span><span class="s2"> &amp;&amp; </span><span class="nv">$GOX_INST_CMD</span><span class="s2"> &amp;&amp; </span><span class="nv">$GOX_BUILD_CMD</span><span class="s2"> &amp;&amp; exit&#34;</span>
</code></pre></div><p>위 샘플 compile.sh 스크립트는 golang 1.13.1 버전에서 빌드한다.
여러 플랫폼용으로 잘 빌드 되는지 확인하기 위해 <a href="https://github.com/mitchellh/gox">gox</a>를 사용해 빌드한다.
빌드된 바이너리는 host 에 남기기 위해 docker run 명령에 volume 파라미터로 프로젝트 폴더를 연결한다.</p>
<h2 id="빌드-결과">빌드 결과</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ file ./build/**/hello
./build/darwin/386/hello:     Mach-O i386 executable
./build/darwin/amd64/hello:   Mach-O 64-bit x86_64 executable
./build/freebsd/386/hello:    ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>FreeBSD<span class="o">)</span>, statically linked, not stripped
./build/freebsd/amd64/hello:  ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>FreeBSD<span class="o">)</span>, statically linked, not stripped
./build/freebsd/arm/hello:    ELF 32-bit LSB executable, ARM, EABI5 version <span class="m">1</span> <span class="o">(</span>FreeBSD<span class="o">)</span>, statically linked, not stripped
./build/linux/386/hello:      ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/amd64/hello:    ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/arm/hello:      ELF 32-bit LSB executable, ARM, EABI5 version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/mips/hello:     ELF 32-bit MSB executable, MIPS, MIPS32 version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/mips64/hello:   ELF 64-bit MSB executable, MIPS, MIPS-III version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/mips64le/hello: ELF 64-bit LSB executable, MIPS, MIPS-III version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/mipsle/hello:   ELF 32-bit LSB executable, MIPS, MIPS32 version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/linux/s390x/hello:    ELF 64-bit MSB executable, IBM S/390, version <span class="m">1</span> <span class="o">(</span>SYSV<span class="o">)</span>, statically linked, not stripped
./build/netbsd/386/hello:     ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>NetBSD<span class="o">)</span>, statically linked, <span class="k">for</span> NetBSD 5.99, not stripped
./build/netbsd/amd64/hello:   ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>NetBSD<span class="o">)</span>, statically linked, <span class="k">for</span> NetBSD 5.99, not stripped
./build/netbsd/arm/hello:     ELF 32-bit LSB executable, ARM, EABI5 version <span class="m">1</span> <span class="o">(</span>NetBSD<span class="o">)</span>, statically linked, <span class="k">for</span> NetBSD 5.99, not stripped
./build/openbsd/386/hello:    ELF 32-bit LSB executable, Intel 80386, version <span class="m">1</span> <span class="o">(</span>OpenBSD<span class="o">)</span>, statically linked, <span class="k">for</span> OpenBSD, not stripped
./build/openbsd/amd64/hello:  ELF 64-bit LSB executable, x86-64, version <span class="m">1</span> <span class="o">(</span>OpenBSD<span class="o">)</span>, statically linked, <span class="k">for</span> OpenBSD, not stripped

</code></pre></div><p>Docker 이미지를 이용하면 비교적 시스템에 영향을 미치지 않고 여러 버전의 golang 에서 기존 프로젝트의 빌드를 테스트 해 볼 수 있다.</p>
]]></content></item><item><title>리눅스의 스레드 구현 살펴보기 - 리눅스는 스레드를 일반 프로세스로 구현한다</title><link>https://byounghoonkim.github.io/posts/2019-03-07-the_linux_implementation_of_threads/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>https://byounghoonkim.github.io/posts/2019-03-07-the_linux_implementation_of_threads/</guid><description>&amp;ldquo;리눅스는 스레드를 일반 프로세스로 구현한다.&amp;rdquo; 라는 문구의 의미에 대해 좀더 깊이 살펴보고 어떤 의미를 가지는지 확인해 본다. 책 &amp;l</description><content type="html"><![CDATA[<p>&ldquo;리눅스는 스레드를 일반 프로세스로 구현한다.&rdquo; 라는 문구의 의미에 대해 좀더 깊이 살펴보고 어떤 의미를 가지는지 확인해 본다.</p>
<p>책 &lt;리눅스 커널 심층 분석&gt;의 리눅스 스레드 구현 이라는 장에는 아래와 같은 설명이 나온다.</p>
<blockquote>
<p>The Linux Implementation of Threads
&hellip;
Linux has a unique implementation of threads.
To the Linux kernel, there is no concept of a thread.
Linux implements all threads as standard processes.
The Linux kernel does not provide any special scheduling semantics or data structures to represent threads.
Instead, a thread is merely a process that shares certain resources with other processes.
Each thread has a unique task_struct and appears to the kernel as a normal process—
threads just happen to share resources, such as an address space, with other processes.
This approach to threads contrasts greatly with operating systems such as Microsoft
Windows or Sun Solaris, which have explicit kernel support for threads (and sometimes
call threads lightweight processes).The name “lightweight process” sums up the difference in
philosophies between Linux and other systems.To these other operating systems, threads
are an abstraction to provide a lighter, quicker execution unit than the heavy process.To
Linux, threads are simply a manner of sharing resources between processes (which are
already quite lightweight). For example, assume you have a process that consists of four
threads. On systems with explicit thread support, one process descriptor might exist that,
in turn, points to the four different threads.The process descriptor describes the shared
resources, such as an address space or open files.The threads then describe the resources
they alone possess. Conversely, in Linux, there are simply four processes and thus four
normal task_struct structures.The four processes are set up to share certain resources.
The result is quite elegant
&hellip;</p>
</blockquote>
<p>스레드라는 개념을 명시적으로 구현한 윈도우나 솔라리스 등의 운영체제와는 달리
리눅스에서의 스레드 구현은 단지 프로세스 간에 리소스를 공유 하는 형태로 구현한다고 설명한다.</p>
<p>리눅스에서는 스레드를 생성할 때 스레드 생성과 관련된 명시적인 커널 API(윈도우의 경우 PsCreateSystemThread 와 같은)를
호출하는 것이 대신 프로세스를 클론하고 클론된 프로세스에서 클론한 프로세스의 리소스를 공유하는 형태로 구현한다.</p>
<p>코드로 알아 보기 위해 아래와 같은 스레드 생성 코드를 작성했다.</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;unistd.h&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;pthread.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">static</span> <span class="kt">void</span><span class="o">*</span> <span class="nf">thread</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">arg</span><span class="p">)</span>
<span class="p">{</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;sleeping... 100 seconds...</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
	<span class="n">sleep</span><span class="p">(</span><span class="mi">100</span><span class="p">);</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">()</span> 
<span class="p">{</span>
	<span class="n">pthread_t</span> <span class="n">tid</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">ret</span><span class="p">;</span>
	<span class="kt">void</span> <span class="o">*</span><span class="n">res</span><span class="p">;</span>

	<span class="n">ret</span> <span class="o">=</span> <span class="n">pthread_create</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tid</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="o">&amp;</span><span class="kr">thread</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
	<span class="n">printf</span><span class="p">(</span><span class="s">&#34;waiting... </span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
	<span class="n">ret</span> <span class="o">=</span> <span class="n">pthread_join</span><span class="p">(</span><span class="n">tid</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">res</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div><p>위 코드를 컴파일(gcc main.c -lpthread)한 후 strace를 통해 실행하면
아래와 같이 pthread_create 호출 시 clone API 를 호출하는 것을 확인할 수 있다.
(좀더 자세한 사항은 man clone(2) 의 CLONE_THREAD 부분을 참고하기 바란다.)</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">&gt; strace ./a.out
...
brk<span class="o">(</span>NULL<span class="o">)</span>                               <span class="o">=</span> 0x55966b82a000
brk<span class="o">(</span>0x55966b84b000<span class="o">)</span>                     <span class="o">=</span> 0x55966b84b000
clone<span class="o">(</span><span class="nv">child_stack</span><span class="o">=</span>0x7f306daeffb0, <span class="nv">flags</span><span class="o">=</span>CLONE_VM<span class="p">|</span>CLONE_FS<span class="p">|</span>CLONE_FILES<span class="p">|</span>CLONE_SIGHAND<span class="p">|</span>CLONE_THREAD<span class="p">|</span>CLONE_SYSVSEM<span class="p">|</span>CLONE_SETTLS<span class="p">|</span>CLONE_PARENT_SETTID<span class="p">|</span>CLONE_CHILD_CLEARTID, parent_
<span class="nv">tidptr</span><span class="o">=</span>0x7f306daf09d0, <span class="nv">tls</span><span class="o">=</span>0x7f306daf0700, <span class="nv">child_tidptr</span><span class="o">=</span>0x7f306daf09d0<span class="o">)</span> <span class="o">=</span> <span class="m">2126</span>                                                                                              
futex<span class="o">(</span>0x7f306dede8c0, FUTEX_WAIT_PRIVATE, 2, NULLsleeping... <span class="m">100</span> seconds...
<span class="o">)</span> <span class="o">=</span> <span class="m">0</span>
write<span class="o">(</span>1, <span class="s2">&#34;waiting... \n&#34;</span>, 12waiting... 
...
</code></pre></div><p>간단하게 나마 리눅스 커널에서는 스레드라는 것이 다른 프로세스의 리소스를 공유하는 프로세스라는 점을 알아 보았다. 그럼 유저 모드에서는 그 영향이 나타날까? thread id 라는 것이 process id 와 동일할 것일까?</p>
<p>위에서 작성한 프로그램을 백그라운드로 실행한다(./a.out &amp;).
그리고 thread 에 관한 정보를 출력하기 위해 ps 명령에 -Lf 옵션을 주어 실행한다.</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">&gt; ./a.out <span class="p">&amp;</span>
<span class="o">[</span>1<span class="o">]</span> <span class="m">4308</span>
waiting... 
sleeping... <span class="m">100</span> seconds...

&gt; ps -Lf
UID        PID  PPID   LWP  C NLWP STIME TTY          TIME CMD
...
bhkim     <span class="m">4308</span>  <span class="m">2028</span>  <span class="m">4308</span>  <span class="m">0</span>    <span class="m">2</span> 23:02 pts/4    00:00:00 ./a.out
bhkim     <span class="m">4308</span>  <span class="m">2028</span>  <span class="m">4310</span>  <span class="m">0</span>    <span class="m">2</span> 23:02 pts/4    00:00:00 ./a.out
...

</code></pre></div><p>ps의 출력 정보 중 PID 4308 이라는 항목으로 두줄의 정보가 나온다.
thread id 정도가 있어야 할 자리에 LWP ID가 출력된다.
첫번째 줄의 LWP 항목은 자신의 PID 와 동일한 값을 가진다.
그리고 두번째 줄의 LWP 항목은 4310 의 값을 가진다.
LWP는 light wight process의 약자로 리눅스 커널이 스레드를 프로세스로 구현함으로 인해 나타난 증상이라고 볼 수 있다.</p>
<p>LWP 항목은 실제로 PID 의 대용으로 사용할 수 있다.
예를 들면, kill 4310 과 같은 명령으로 LWP 4310 인 프로세스를 종료할 수도 있다.</p>
<p>요약,</p>
<ol>
<li>리눅스 커널은 스레드를 프로세스를 이용해 구현한다.</li>
<li>LWP 라는 이름은 리눅스의 스레드 구현에 기인한 산물이다.</li>
<li>리눅스의 커널 구현은 스레드를 명시적으로 구현하는 다른 운영체제와 대조된다.</li>
</ol>
]]></content></item><item><title>Vi의 Esc 기원</title><link>https://byounghoonkim.github.io/posts/2015-02-13-vim-holy-grail-esc-ctrl-bracke-and-jk/</link><pubDate>Fri, 13 Feb 2015 00:00:00 +0000</pubDate><guid>https://byounghoonkim.github.io/posts/2015-02-13-vim-holy-grail-esc-ctrl-bracke-and-jk/</guid><description>Vi 제작자는 자주 모드 전환키로 왜 Esc 키를 선택 했을까? Vi에서 Esc키는 삽입 모드에서 명령 모드로 전환하는 키로 아주 자주 쓰이는 키다. 방향키 대신 hjkl 키로 방향키</description><content type="html"><![CDATA[<p>Vi 제작자는 자주 모드 전환키로 왜 Esc 키를 선택 했을까?</p>
<p>Vi에서 Esc키는 삽입 모드에서 명령 모드로 전환하는 키로 아주 자주 쓰이는 키다.
방향키 대신 hjkl 키로 방향키를 대신할 만큼 단축키 선정에서 효율성을 중시하는 에디터가 자주 쓰는 키를 불편한 Esc로 선정했다는 것은 이해되지 않는다.</p>
<p><a href="http://federico.galassi.net/2012/06/20/the-vim-holy-grail/">The Vim Holy Grail</a>이라는 글에서 힌트를 얻을 수 있다.</p>
<p>인용 요약 하면 아래와 같다.</p>
<ul>
<li>Vi가 만들어질 당시에 쓰였던 키보드는 ADM3A 이란 터미널에 딸려 있는 키보드였다.</li>
<li>이 키보드의 Esc키 위치는 현대 키보드의 탭키 위치로 자주 타이핑 하기에 적당한 위치였다.</li>
<li>이후 키보드 레이아웃이 바뀌면서 Esc는 자주 누르기 불편한 위치로 이동했지만 Esc로 모드 전환 하는 상태는 유지되었다.</li>
</ul>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/a/a0/KB_Terminal_ADM3A.svg/931px-KB_Terminal_ADM3A.svg.png" alt="ADM3A keyboard layout"></p>
]]></content></item></channel></rss>